{"version":3,"sources":["Timer/actions.js","Timer/Timer.jsx","MarsCalendar/MarsTime.js","Clock/Clock.js","MarsCalendar/MarsClock.js","MarsCalendar/reducer.js","EarthCalendar/reducer.js","EarthCalendar/EarthClock.js","App.js","serviceWorker.js","CoordinatedMarsTime/CoordinatedMarsTime.jsx","CoordinatedMarsTime/reducer.js","DebugView/DebugView.jsx","DebugView/reducer.js","reducer.js","index.js"],"names":["TIME_UPDATED","Timer","dispatch","this","props","intervalId","setInterval","time","Date","type","payload","clearInterval","React","Component","connectedTimer","connect","toRad","deg","Math","PI","MarsTime","date","Object","classCallCheck","millis","getTime","jut","jtt","deltaJ2000","MARS_DAYS_SINCE_JAN_6","marsSolDate","mtc","meanAnomaly","fms","eccentricity","perturbers","cos","equationOfCenter","sin","nu_m","trueAnomaly","aerocentricSolarLongitude","ls","equationOfTimeDegrees","eotTime","long","meanSolarTimeAtLongitude","Clock","_this$props","clockName","clockTime","react_default","a","createElement","className","formatTime","hours","hoursPart","floor","toLocaleString","minimumIntegerDigits","useGrouping","minutesPart","secondsPart","concat","MarsClock","name","marsTime","Clock_Clock","ConnectedMarsClock","state","marsCalendar","INITIAL_STATE","EarthClock","timeInHours","getHours","getMinutes","getSeconds","getMilliseconds","ConnectedEarthClock","earthCalendar","App","longitude","Boolean","window","location","hostname","match","CoordinatedMarsTime","DebugView","datetime","String","formatNumber","formatTimeFromHours","trueSolarTimeAtLongitude","n","minimumFractionDigits","maximumFractionDigits","debugView","composedReducer","combineReducers","coordinatedMarsTime","action","objectSpread","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c77b5a98.chunk.js","sourcesContent":["const TIME_UPDATED = 'time_updated';\n\n// action creator for TIME_UPDATED action\nfunction timeUpdated(datetime) {\n  return {\n    type: TIME_UPDATED,\n    payload: datetime\n  }\n}\n\nexport {\n  TIME_UPDATED,\n  timeUpdated\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { timeUpdated } from './actions';\n\nclass Timer extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    // set interval\n    this.intervalId = setInterval(() => {\n      const time = new Date();\n      dispatch(timeUpdated(time));\n    }, 0);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return \"\";\n  }\n}\n\nconst connectedTimer = connect()(Timer);\n\nexport { \n  connectedTimer as Timer\n};\n","\nfunction toRad(deg) {\n    return deg / 180 * Math.PI;\n}\n\nclass MarsTime {\n    constructor(date) {\n        this.date = date;\n        this.millis = date.getTime();\n        // Julian DateTime Unix Epoch\n        const MILLIS_PER_DAY = 1000 * 60 * 60 * 24;\n        const JULIAN_DATE_AT_EPOCH = 2440587.5;\n        this.jut = this.millis / MILLIS_PER_DAY + JULIAN_DATE_AT_EPOCH;\n\n        // Julian Terrestrial Time (adjusted for leap seconds)\n        // TODO: find an API that gives access to this information so we're future-proofed against new leap seconds\n        // TODO: support calculations of JTT prior to UNIX epoch; this equation is only accurate for post-epoch datetimes\n        this.jtt = this.jut + (37 + 32.184) / 86400;\n\n        const JULIAN_DATE_AT_JAN_1_2000 = 2451545;\n        this.deltaJ2000 = this.jtt - JULIAN_DATE_AT_JAN_1_2000;\n\n        // at midnight on January 6, 2000 it was midnight at the Mars Prime Meridian\n        const EARTH_DAYS_SINCE_JAN_6 = this.deltaJ2000 - 4.5;\n        const MARS_EARTH_DAY_RATIO = 1.027491252;\n        const MARS_DAYS_SINCE_JAN_6 = EARTH_DAYS_SINCE_JAN_6 / MARS_EARTH_DAY_RATIO;\n        // By convention, to keep the MSD (Mars Sol Date) positive going back to middy December 29, 1873\n        // we add those days\n        const MARS_SOL_DATE_ADJUSTMENT = 44796;\n        const MARS_SOL_DATE_ERROR_ADJUSTMENT = 0.00096\n        this.marsSolDate = MARS_DAYS_SINCE_JAN_6 + MARS_SOL_DATE_ADJUSTMENT - MARS_SOL_DATE_ERROR_ADJUSTMENT;\n\n        this.mtc = (24 * this.marsSolDate) % 24;\n\n        const MEAN_ANOMALY_AT_J2000 = 19.3870; // in degrees\n        // in theory this should give 0.52402074; but just in case, we're hard-coding the value given by Allison & McEwen (2000)\n        // const MARS_ORBIT_LENGTH_IN_EARTH_DAYS = 686.995696258211149;\n        // const MEAN_DAILY_MOTION = 360 / MARS_ORBIT_LENGTH_IN_EARTH_DAYS; // in degrees\n        const MEAN_DAILY_MOTION =  0.52402075; // in degrees\n        this.meanAnomaly = (MEAN_ANOMALY_AT_J2000 + MEAN_DAILY_MOTION * this.deltaJ2000) % 360;\n\n        // angle of the fictitious mean sun\n        const ANGLE_AT_J2000 = 270.3863; // degrees\n        const DAILY_ANGLE_CHANGE = 0.52403840; // degrees\n        this.fms = (ANGLE_AT_J2000 + DAILY_ANGLE_CHANGE * this.deltaJ2000) % 360;\n\n        const ECCENTRICITY_AT_J2000 = 0.09340;\n        const DAILY_DEVIATION = 2.477E-9;\n        this.eccentricity = ECCENTRICITY_AT_J2000 + DAILY_DEVIATION * this.deltaJ2000;\n\n        this.perturbers = 0.0071 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 2.2353 + toRad(49.409))\n                        + 0.0057 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 2.7543 + toRad(168.173))\n                        + 0.0039 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 1.1177 + toRad(191.837))\n                        + 0.0037 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 15.7866 + toRad(21.736))\n                        + 0.0021 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 2.1354 + toRad(15.704))\n                        + 0.0020 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 2.4694 + toRad(95.528))\n                        + 0.0018 * Math.cos(toRad(0.985626) * this.deltaJ2000 / 32.8493 + toRad(49.095));\n\n        this.equationOfCenter = (10.691 + 3E-7 * this.deltaJ2000) * Math.sin(toRad(this.meanAnomaly))\n                + 0.623 * Math.sin(2 * toRad(this.meanAnomaly))\n                + 0.050 * Math.sin(3 * toRad(this.meanAnomaly))\n                + 0.005 * Math.sin(4 * toRad(this.meanAnomaly))\n                + 0.0005 * Math.sin(5 * toRad(this.meanAnomaly))\n                + this.perturbers;\n        this.nu_m = this.equationOfCenter;\n\n        this.trueAnomaly = this.equationOfCenter + this.meanAnomaly;\n\n        this.aerocentricSolarLongitude = this.fms + this.equationOfCenter;\n        this.ls = this.aerocentricSolarLongitude;\n\n        //EOT = 2.861° sin 2Ls - 0.071° sin 4Ls + 0.002° sin 6Ls - (ν - M)\n\n\n        this.equationOfTimeDegrees = 2.861 * Math.sin(2 * toRad(this.ls))\n                            - 0.071 * Math.sin(4 * toRad(this.ls))\n                            + 0.002 * Math.sin(6 * toRad(this.ls))\n                            - this.equationOfCenter;\n        this.eotTime = this.equationOfTimeDegrees * 24 / 360;\n    }\n\n    meanSolarTimeAtLongitude(long) {\n        // add 24 so we don't have to deal with negative numbers\n        // and use (long % 360) to adjust longitude to a legal range\n        return (this.mtc + 24 - (long % 360)* 24 / 360) % 24;\n    }\n\n    trueSolarTimeAtLongitude(long) {\n        return this.meanSolarTimeAtLongitude(long) + this.eotTime;\n    }\n\n}\n\nexport {\n    MarsTime\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './clock.css';\n\n/**\n * Given a name and a time in props, displays it as a clock.\n */\nclass Clock extends React.Component {\n    render() {\n        const { clockName, clockTime } = this.props;\n        return <div className={\"clock\"}>\n            <div className={\"clockTime\"}>{Clock.formatTime(clockTime)}</div>\n            <div className={\"clockName\"}>{clockName}</div>\n        </div>;\n    }\n\n    /**\n     * Format a decimal representing the hours within the day into a clock string like 12:34:56\n     * @param hours\n     */\n    static formatTime(hours) {\n        const hoursPart = Math.floor(hours).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n        const minutesPart = Math.floor((hours * 60)%60).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n        const secondsPart = Math.floor((hours * 3600)%60).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n        return `${hoursPart}:${minutesPart}:${secondsPart}`;\n    }\n}\n\nClock.propTypes = {\n    clockName: PropTypes.string,\n    clockTime: PropTypes.number\n};\n\nexport { Clock };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {Clock} from '../Clock';\n\n/**\n * A clock that displays MTC (Mars Coordinated Time).\n */\nclass MarsClock extends React.Component {\n    render() {\n        const { name, marsTime } = this.props;\n        return <Clock\n            clockName={name}\n            clockTime={marsTime.mtc}\n        />;\n    }\n}\n\nMarsClock.propTypes = {\n    marsTime: PropTypes.object,\n    name: PropTypes.string,\n    longitude: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        marsTime: state.marsCalendar.marsTime\n    };\n}\n\nconst ConnectedMarsClock = connect(mapStateToProps)(MarsClock);\n\nexport {\n    ConnectedMarsClock as MarsClock\n};","import { TIME_UPDATED } from '../Timer';\nimport { MarsTime } from './MarsTime';\n\nconst INITIAL_STATE = {\n    marsTime: new MarsTime(new Date())\n};\n\nfunction reducer(state, action) {\n    if (state == null) {\n        return INITIAL_STATE;\n    }\n    switch(action.type) {\n        case TIME_UPDATED:\n            return {\n                marsTime: new MarsTime(action.payload)\n            };\n        default:\n            return state;\n    }\n}\n\nexport { reducer };\n","import {TIME_UPDATED} from '../Timer';\n\nconst INITIAL_STATE = {\n    time: new Date()\n};\n\nfunction reducer(state, action) {\n    if (state == null) {\n        return INITIAL_STATE;\n    }\n    switch(action.type) {\n        case TIME_UPDATED:\n            return {\n                ...state,\n                time: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport { reducer };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Clock } from '../Clock';\n\nclass EarthClock extends React.Component {\n    render() {\n        const { time } = this.props;\n        const timeInHours = time.getHours() + time.getMinutes() / 60 + time.getSeconds() / 3600 + time.getMilliseconds() / 36000000;\n\n        return <Clock\n            clockName={\"Local Time\"}\n            clockTime={timeInHours}\n            />;\n    }\n}\n\nEarthClock.propTypes = {\n    name: PropTypes.string,\n    time: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        time: state.earthCalendar.time\n    };\n}\n\nconst ConnectedEarthClock = connect(mapStateToProps)(EarthClock);\n\nexport {\n    ConnectedEarthClock as EarthClock\n};","import React from 'react';\nimport './App.css';\nimport {Timer} from './Timer';\nimport {MarsClock} from './MarsCalendar';\nimport {EarthClock} from './EarthCalendar';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Timer/>\n            <MarsClock\n                name={\"Curiosity\"}\n                longitude={222.6}\n            />\n            <EarthClock\n                name={\"Earth\"}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass CoordinatedMarsTime extends React.Component {\n  render() {\n    const { time } = this.props;\n    return <p>{time}</p>\n  }\n}\n\nCoordinatedMarsTime.propTypes = {\n  time: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n  return {\n    time: state.time\n  };\n}\n\nexport default connect(mapStateToProps)(CoordinatedMarsTime);\n","import { TIME_UPDATED } from '../Timer';\n\n\nconst INITIAL_STATE = {\n  time: new Date().getTime()\n};\n\nfunction reducer(state, action) {\n  if (state === null || typeof(state) == 'undefined') {\n    return INITIAL_STATE;\n  }\n  if (action === null || typeof(action) == 'undefined') {\n    return state;\n  }\n  switch(action.type) {\n    case TIME_UPDATED: \n      return {time: action.payload}\n    default:\n      return state;\n  }\n}\n\nexport { reducer };\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {MarsTime} from '../MarsCalendar';\n\nclass DebugView extends React.Component {\n  render() {\n    const { datetime } = this.props;\n    const marsTime = new MarsTime(datetime);\n\n    return <div>\n      <div>Date: {String(marsTime.date)}</div>\n      <div>Unix Epoch Millis: {marsTime.millis}</div>\n      <div>JD<sub>UT</sub>: {DebugView.formatNumber(marsTime.jut)}</div>\n      <div>JD<sub>TT</sub>: {DebugView.formatNumber(marsTime.jtt)}</div>\n      <div>&Delta;J2000: {DebugView.formatNumber(marsTime.deltaJ2000)}</div>\n      <div>Coordinated Mars Time: {DebugView.formatTimeFromHours(marsTime.mtc)}</div>\n      <div>M: {DebugView.formatNumber(marsTime.meanAnomaly)}&deg;</div>\n      <div>&alpha;<sub>FMS</sub>: {DebugView.formatNumber(marsTime.fms)}&deg;</div>\n      <div><i>e</i>: {DebugView.formatNumber(marsTime.eccentricity)}</div>\n      <div>PBS: {DebugView.formatNumber(marsTime.perturbers)}&deg;</div>\n      <div>v - M: {DebugView.formatNumber(marsTime.equationOfCenter)}&deg;</div>\n      <div>v: {DebugView.formatNumber(marsTime.trueAnomaly)}&deg;</div>\n      <div>L<sub>S</sub>: {DebugView.formatNumber(marsTime.aerocentricSolarLongitude)}&deg;</div>\n      <div>EOT = {DebugView.formatNumber(marsTime.equationOfTimeDegrees)}&deg; = {DebugView.formatTimeFromHours(marsTime.eotTime)}</div>\n      <div><b>Curiosity</b></div>\n      <div>137.4&deg;E longitude</div>\n      <div>LMST: {DebugView.formatTimeFromHours(marsTime.meanSolarTimeAtLongitude(360-137.4))}</div>\n      <div>LTST: {DebugView.formatTimeFromHours(marsTime.trueSolarTimeAtLongitude(360-137.4))}</div>\n    </div>;\n  }\n\n  static formatNumber(n) {\n      return n.toLocaleString('en-US', {minimumFractionDigits: 5, maximumFractionDigits:5, useGrouping:true});\n  }\n\n  static formatTimeFromHours(hours) {\n    const hoursPart = Math.floor(hours).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n    const minutesPart = Math.floor((hours * 60)%60).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n    const secondsPart = Math.floor((hours * 3600)%60).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n    return `${hoursPart}:${minutesPart}:${secondsPart}`;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    datetime: state.debugView.datetime\n  }\n}\n\nconst connectedDebugView = connect(mapStateToProps)(DebugView);\n\nexport {\n  connectedDebugView as DebugView\n};\n","import { TIME_UPDATED } from '../Timer';\n\nconst INITIAL_STATE = {\n  datetime: new Date(),\n  time: new Date().getTime()\n};\n\nfunction reducer(state, action) {\n  if (state == null) {\n    return INITIAL_STATE;\n  }\n  switch(action.type) {\n    case TIME_UPDATED:\n      return { \n        datetime: action.payload,\n        time: action.payload.getTime()\n      };\n    default:\n      return state;\n  }\n}\n\nexport { reducer };\n","import { reducer as coordinatedMarsTimeReducer } from './CoordinatedMarsTime';\nimport { reducer as debugViewReducer } from './DebugView';\nimport { reducer as marsCalendarReducer } from './MarsCalendar';\nimport { reducer as earthCalendarReducer } from './EarthCalendar';\nimport { combineReducers } from 'redux';\n\nconst composedReducer = combineReducers({\n  coordinatedMarsTime: coordinatedMarsTimeReducer,\n  debugView: debugViewReducer,\n  marsCalendar: marsCalendarReducer,\n  earthCalendar: earthCalendarReducer\n});\n\nexport default composedReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}